"""
Django settings for deploy_marche24 project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3c64!blj_^b7h67=coe1r_o)7iy^^p%i9=sme6tj(q%1rpc_3)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['13.247.101.206','127.0.0.1','lushimarche.com','www.lushimarche.com',]
    
    
CSRF_TRUSTED_ORIGINS = [
    "https://lushimarche.com",
    "https://www.lushimarche.com",  # ajoute aussi la version avec www si nécessaire
]
   


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tailwind',
    'theme',
    "django_browser_reload",
    'core',
    'base',
    'simplemathcaptcha',
    'storages',
]
TAILWIND_APP_NAME= 'theme'
INTERNAL_IPS= [
    "127.0.0.1"
]
NPM_BIN_PATH=r"C:\Program Files\nodejs\npm.cmd" 
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_browser_reload.middleware.BrowserReloadMiddleware",
    'core.middleware.ActiveUserMiddleware',
    
    
]

ROOT_URLCONF = 'deploy_marche24.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.cart', 
            ],
        },
    },
]

WSGI_APPLICATION = 'deploy_marche24.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Fetch environment variables for PostgreSQL
POSTGRES_DB = os.getenv("DB_NAME")
POSTGRES_PASSWORD = os.getenv("DB_PASSWORD")
POSTGRES_USER = os.getenv("DB_USER")
POSTGRES_HOST = os.getenv("DB_HOST")
POSTGRES_PORT = os.getenv("DB_PORT")

# Check if PostgreSQL environment variables are set
POSTGRES_READY = (
    POSTGRES_DB is not None
    and POSTGRES_PASSWORD is not None
    and POSTGRES_USER is not None
    and POSTGRES_HOST is not None
    and POSTGRES_PORT is not None
)

# Define the DATABASES setting based on the availability of PostgreSQL variables
if POSTGRES_READY:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': POSTGRES_DB,
            'USER': POSTGRES_USER,
            'PASSWORD': POSTGRES_PASSWORD,
            'HOST': POSTGRES_HOST,
            'PORT': POSTGRES_PORT,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'Africa/Kinshasa'

USE_I18N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
# Fetch environment variables for AWS S3


# # Check if all necessary AWS S3 environment variables are set
# AWS_S3_READY = (
#     AWS_ACCESS_KEY_ID is not None
#     and AWS_SECRET_ACCESS_KEY is not None
#     and AWS_STORAGE_BUCKET_NAME is not None
#     and AWS_S3_REGION_NAME is not None
# )

# if AWS_S3_READY:
#     # Configure AWS S3 settings
#     AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

#     # Static files (CSS, JavaScript, images)
#     STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
#     STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

#     # Media files (uploads)
#     MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
#     DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

#     # Optional: Cache control settings
#     AWS_S3_OBJECT_PARAMETERS = {
#         'CacheControl': 'max-age=86400',
#     }
# else:
#     # Fallback to default local storage
#     STATIC_URL = '/static/'
#     MEDIA_URL = '/media/'
#     STATIC_ROOT = os.path.join(BASE_DIR, 'static')
#     MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = 'static/'
STATICFILES_DIRS= [BASE_DIR/'static']
STATIC_ROOT = BASE_DIR/'assets'
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
MEDIA_URL = 'img/'
MEDIA_ROOT = BASE_DIR/'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'core.CustomUser'
STRIPE_API_KEY_PUBLISHABLE = 'pk_test_51QSaN4FZEV2V9Kyd7zIt3uROGM03QcuRbVwn0YgI6ZvkNSaMrR8AEmtFB9tOLOhpHVockM8eMnXHQLffxCgMiusT00e6PPNriR'
STRIPE_TEST_SECRET_KEY = 'sk_test_51QSaN4FZEV2V9KydzSnlUBZVOFrOBptatGv88hTJAgo0IDjFZlZb6Ld52RHdo0KMJyBePfhk3L9CVddisqF0EaQW00i76DOZrA'

# settings.py

# CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Redis comme broker
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Redis pour stocker les résultats
# CELERY_ACCEPT_CONTENT = ['json']
# CELERY_TASK_SERIALIZER = 'json'
# CELERY_TIMEZONE = 'UTC'
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "default"
# # 
# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis://127.0.0.1:6379/1",  # adapte si ton Redis est ailleurs
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#         }
#     }
# }

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', default='af-south-1')

AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.af-south-1.amazonaws.com"
AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_EXPIRE = 5
AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN')

STORAGES = {

    # Media file (image) management   
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
    },
    
    # CSS and JS file management
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
    },
}